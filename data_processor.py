import pandas as pd
import openpyxl
from datetime import datetime
from typing import Dict
import logging

logger = logging.getLogger(__name__)


class DataProcessor:
    def __init__(self):
        self.results = []
    
    def add_micro_influencer(self, user_data: Dict, email: str = None):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –º–∏–∫—Ä–æ-–∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
        result = {
            '–ù–∏–∫–Ω–µ–π–º': user_data.get('uniqueId', ''),
            'Email': email or '',
            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ–ª–ª–æ–≤–µ—Ä–æ–≤': user_data.get('followerCount', 0),
            '–ë–∏–æ–≥—Ä–∞—Ñ–∏—è': user_data.get('signature', ''),
            '–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å': f"https://www.tiktok.com/@{user_data.get('uniqueId', '')}",
            '–í—Å–µ–≥–æ –≤–∏–¥–µ–æ': user_data.get('videoCount', 0),
            '–í–∏–¥–µ–æ —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º': 0  # –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ
        }
        self.results.append(result)
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –º–∏–∫—Ä–æ-–∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä: {result['–ù–∏–∫–Ω–µ–π–º']}")
    
    def update_video_stats(self, username: str, high_view_videos: int):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∏–¥–µ–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        for result in self.results:
            if result['–ù–∏–∫–Ω–µ–π–º'] == username:
                result['–í–∏–¥–µ–æ —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º'] = high_view_videos
                break
    
    def create_excel_file(self, filename: str = None) -> str:
        """–°–æ–∑–¥–∞–µ—Ç Excel —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏"""
        if not self.results:
            logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Excel —Ñ–∞–π–ª–∞")
            return None
        
        if not filename:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"tiktok_analysis_search_results_{timestamp}.xlsx"
        
        try:
            df = pd.DataFrame(self.results)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ñ–æ–ª–ª–æ–≤–µ—Ä–æ–≤ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
            df = df.sort_values('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ–ª–ª–æ–≤–µ—Ä–æ–≤', ascending=False)
            
            # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            with pd.ExcelWriter(filename, engine='openpyxl') as writer:
                df.to_excel(writer, sheet_name='–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞', index=False)
                
                # –ü–æ–ª—É—á–∞–µ–º workbook –∏ worksheet –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                workbook = writer.book
                worksheet = writer.sheets['–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞']
                
                # –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
                for column in worksheet.columns:
                    max_length = 0
                    column_letter = column[0].column_letter
                    
                    for cell in column:
                        try:
                            if len(str(cell.value)) > max_length:
                                max_length = len(str(cell.value))
                        except:
                            pass
                    
                    adjusted_width = min(max_length + 2, 50)
                    worksheet.column_dimensions[column_letter].width = adjusted_width
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                worksheet.insert_rows(1)
                worksheet['A1'] = f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –º–∏–∫—Ä–æ-–∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤ TikTok"
                worksheet['A1'].font = openpyxl.styles.Font(size=14, bold=True)
                worksheet.merge_cells('A1:G1')
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∏—Å–∫–µ
                worksheet.insert_rows(2)
                search_info = f"–î–∞—Ç–∞ –ø–æ–∏—Å–∫–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
                worksheet['A2'] = search_info
                worksheet.merge_cells('A2:G2')
                
                worksheet.insert_rows(3)  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
            
            logger.info(f"Excel —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {filename}")
            return filename
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞: {str(e)}")
            return None
    
    def get_results_summary(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        if not self.results:
            return "‚ùå –ú–∏–∫—Ä–æ-–∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        total_found = len(self.results)
        with_email = len([r for r in self.results if r['Email']])
        
        summary = f"""
üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –º–∏–∫—Ä–æ-–∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤ TikTok

‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {total_found}
üìß –ê–∫–∫–∞—É–Ω—Ç–æ–≤ —Å email: {with_email}
üéØ –ü—Ä–æ—Ü–µ–Ω—Ç —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏: {(with_email/total_found*100):.1f}%

üì± –¢–æ–ø-3 –ø–æ —Ñ–æ–ª–ª–æ–≤–µ—Ä–∞–º:
"""
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-3
        sorted_results = sorted(self.results, 
                              key=lambda x: x['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ–ª–ª–æ–≤–µ—Ä–æ–≤'], 
                              reverse=True)[:3]
        
        for i, result in enumerate(sorted_results, 1):
            summary += f"{i}. @{result['–ù–∏–∫–Ω–µ–π–º']} - {result['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ–ª–ª–æ–≤–µ—Ä–æ–≤']} —Ñ–æ–ª–ª–æ–≤–µ—Ä–æ–≤\n"
        
        return summary.strip()
    
    def clear_results(self):
        """–û—á–∏—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
        self.results = []
        logger.info("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—á–∏—â–µ–Ω—ã") 